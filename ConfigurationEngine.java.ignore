package com.gokdenizozkan.ddd.recommendationservice.feature.configuration;

import com.gokdenizozkan.ddd.recommendationservice.config.SolrClientProvider;
import org.apache.solr.client.solrj.SolrClient;
import org.apache.solr.client.solrj.SolrRequest;
import org.apache.solr.client.solrj.request.CollectionsApi;
import org.apache.solr.client.solrj.request.ConfigsetsApi;
import org.apache.solr.client.solrj.request.CoreAdminRequest;
import org.apache.solr.client.solrj.request.schema.SchemaRequest;
import org.apache.solr.client.solrj.response.CoreAdminResponse;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

@Service
public class ConfigurationEngine {
    private final SolrClient client;

    public ConfigurationEngine(SolrClientProvider provider,
                               @Value("${engine.configuration-engine.base-solr-url}") String baseSolrUrl) {
        this.client = provider.http2(baseSolrUrl);
    }

    public void listCollections() {
        CollectionsApi.ListCollections listCollections = new CollectionsApi.ListCollections();
        CollectionsApi.ListCollectionsResponse response = null;
        try {
            response = listCollections.process(client);
        } catch (Exception e) {
            e.printStackTrace();
        }
        assert response != null;
        System.out.println(response.jsonStr());
    }
    public void createCore() {
        CoreAdminResponse response = null;
        try {
            response = CoreAdminRequest
                    .createCore("foodstores", "foodstores", client);
        } catch (Exception e) {
            e.printStackTrace();
        }
        System.out.println(response.jsonStr());
    }

    public void findSchema() {
        SchemaRequest.Fields fields = new SchemaRequest.Fields();
        SchemaRequest request = new SchemaRequest();

        try {
            request.process(client);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
